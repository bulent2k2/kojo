kojoVarsayılanİkinciBakışaçısınıKur()
çıktıyıSil()
silVeSakla()
yaklaşmayaİzinVerme()

satıryaz("Oyunu kazanmak için kırmızı yuvarlağı bul ve al. Sonra da başa dönüp yeşil yuvarlağı al.")
satıryaz(s"\nKendi mağaranı kurmak için, '$kurulumDizini/examples/tiledgame/level1.tmx' dosyasını www.mapeditor.org sitesindeki Tiled (çini) düzenleyicisiyle değiştirebilirsin.")
satıryaz("Kendi mağaranı ikinci düzey olarak (level2.tmx) yazılımcığa ekleyebilir misin?")
tuvaliKaydır(-tuvalAlanı.x, tuvalAlanı.y)
artalanıKur(Renk.ada(189, 0.03, 0.45))

// çini dünyasının düzeyleri var. Hangi düzeydeki çinilerle çarpışma olacak belirtelim:
dez çarpışmaDüzeyi = 1

sınıf Oyuncu(çiniX: Sayı, çiniY: Sayı, dünya: ÇiniDünyası) {
    dez oyuncununKonumu = dünya.çinidenKojoya(ÇiniXY(çiniX, çiniY))
    dez sayfa = BirSayfaKostüm("player.png", 30, 42)

    // oyuncunun kostüm resimlerinin boyutları 30x40 (nokta kare)
    // biraz küçültelim ki 24x24 boyutlarındaki çinilere sığsın
    tanım oyuncununResmi(img: İmge) = büyüt(0.8) -> Resim.imge(img)

    dez sağaDönükDuruş = Resim.küme(oyuncununResmi(sayfa.resimSeç(0, 0)))
    dez solaDönükDuruş = Resim.küme(oyuncununResmi(sayfa.resimSeç(0, 1)))

    dez sağaKoşu = Resim.küme(Dizin(
        sayfa.resimSeç(0, 2),
        sayfa.resimSeç(1, 2),
        sayfa.resimSeç(2, 2),
        sayfa.resimSeç(3, 2),
        sayfa.resimSeç(4, 2)
    ).işle(oyuncununResmi))

    dez solaKoşu = Resim.küme(Dizin(
        sayfa.resimSeç(0, 3),
        sayfa.resimSeç(1, 3),
        sayfa.resimSeç(2, 3),
        sayfa.resimSeç(3, 3),
        sayfa.resimSeç(4, 3)
    ).işle(oyuncununResmi))

    dez sağaZıplayış = Resim.küme(Dizin(
        sayfa.resimSeç(0, 0),
        sayfa.resimSeç(1, 0),
        sayfa.resimSeç(2, 0),
        sayfa.resimSeç(3, 0)
    ).işle(oyuncununResmi))

    dez solaZıplayış = Resim.küme(Dizin(
        sayfa.resimSeç(0, 1),
        sayfa.resimSeç(1, 1),
        sayfa.resimSeç(2, 1),
        sayfa.resimSeç(3, 1)
    ).işle(oyuncununResmi))

    den ancılResim = sağaDönükDuruş // bu andaki resim
    ancılResim.konumuKur(oyuncununKonumu)

    den sağaMıBakıyor = doğru
    dez yerçekimi = -0.1
    dez yatayHız = 3.0
    den dikeyHız = -1.0
    den zıplıyorMu = yanlış

    tanım birAdımİleri() {
        çarpışmalarBirAdımİleri()
        hedefYuvarlaklarBirAdımİleri()
    }

    den hedefEtkinMi = yanlış
    tanım hedefYuvarlaklarBirAdımİleri() {
        eğer (ancılResim.çarptıMı(ilkHedef)) {
            ilkHedef.sil()
            hedef.saydamlığıKur(1)
            hedefEtkinMi = doğru
        }
        eğer (hedefEtkinMi) {
            eğer (ancılResim.çarptıMı(hedef)) {
                hedef.sil()
                durdur() // oyunu iyileştirmeye davet: ikinci mağara (level2.tmx) oluştur ve burada ona geç!
                çizMerkezdeYazı("Tebrikler!", yeşil, 30)
            }
        }
    }

    tanım çarpışmalarBirAdımİleri() {
        eğer (tuşaBasılıMı(tuşlar.sağ)) {
            sağaMıBakıyor = doğru
            resmiGüncelle(sağaKoşu)
            ancılResim.götür(yatayHız, 0)
            eğer (dünya.sağdaÇiniVarMı(ancılResim, çarpışmaDüzeyi)) {
                dünya.soldakiÇiniyeTaşı(ancılResim)
            }
        }
        yoksa eğer (tuşaBasılıMı(tuşlar.sol)) {
            sağaMıBakıyor = yanlış
            resmiGüncelle(solaKoşu)
            ancılResim.götür(-yatayHız, 0)
            eğer (dünya.soldaÇiniVarMı(ancılResim, çarpışmaDüzeyi)) {
                dünya.sağdakiÇiniyeTaşı(ancılResim)
            }
        }
        yoksa {
            eğer (sağaMıBakıyor) {
                resmiGüncelle(sağaDönükDuruş)
            }
            yoksa {
                resmiGüncelle(solaDönükDuruş)
            }
        }

        eğer (tuşaBasılıMı(tuşlar.yukarı)) {
            eğer (!zıplıyorMu) {
                dikeyHız = 5
            }
        }

        dikeyHız += yerçekimi
        dikeyHız = enİrisi(dikeyHız, -10)
        ancılResim.götür(0, dikeyHız)

        eğer (dünya.aşağıdaÇiniVarMı(ancılResim, çarpışmaDüzeyi)) {
            zıplıyorMu = yanlış
            dünya.yukarıdakiÇiniyeTaşı(ancılResim)
            dikeyHız = 0
        }
        yoksa {
            zıplıyorMu = doğru
            eğer (dünya.yukarıdaÇiniVarMı(ancılResim, çarpışmaDüzeyi)) {
                dünya.aşağıdakiÇiniyeTaşı(ancılResim)
                dikeyHız = -1
            }
        }

        eğer (zıplıyorMu) {
            eğer (sağaMıBakıyor) {
                resmiGüncelle(sağaZıplayış)
            }
            yoksa {
                resmiGüncelle(solaZıplayış)
            }
            ancılResim.sonrakiniGöster(200)
        }
        yoksa {
            ancılResim.sonrakiniGöster()
        }
        gerektikçeTuvaliKaydır()
    }

    den ta = tuvalAlanı
    tanım gerektikçeTuvaliKaydır() {
        dez eşik = 200
        dez konum = ancılResim.konum
        eğer (ta.x + ta.eni - konum.x < eşik) {
            tuvaliKaydır(yatayHız, 0)
            ta = tuvalAlanı
        }
        yoksa eğer (konum.x - ta.x < eşik) {
            tuvaliKaydır(-yatayHız, 0)
            ta = tuvalAlanı
        }
    }

    tanım resmiGüncelle(yeniResim: Resim) {
        eğer (yeniResim != ancılResim) {
            ancılResim.gizle()
            yeniResim.göster()
            yeniResim.konumuKur(ancılResim.konum)
            ancılResim = yeniResim
        }
    }

    tanım çiz() {
        çizVeSakla(solaDönükDuruş, sağaKoşu, solaKoşu, sağaZıplayış, solaZıplayış)
        ancılResim.çiz()
    }
}

sınıf İnenÇıkanTaşlar(çiniX: Sayı, çiniY: Sayı, dünya: ÇiniDünyası) {
    dez oyuncununKonumu = dünya.çinidenKojoya(ÇiniXY(çiniX, çiniY))
    dez sayfa = BirSayfaKostüm("tiles.png", 24, 24)
    // inen çıkan taşları biraz küçültelim. Yoksa yan çinideki oyuncuya da çarparlar:
    tanım taşınResmi(imge: İmge) = büyüt(0.98) * götür(0.2, 0.2) -> Resim.imge(imge)

    den ancılResim = Resim.küme(Dizin(
        sayfa.resimSeç(0, 6),
        sayfa.resimSeç(1, 6)
    ).işle(taşınResmi))

    ancılResim.konumuKur(oyuncununKonumu)

    dez yerçekimi = -0.03
    // den yatayHız = 0.0
    den dikeyHız = -2.0

    tanım birAdımİleri() {
        dikeyHız += yerçekimi
        dikeyHız = enİrisi(dikeyHız, -10)
        ancılResim.götür(0, dikeyHız)
        ancılResim.sonrakiniGöster()
        eğer (dünya.aşağıdaÇiniVarMı(ancılResim, çarpışmaDüzeyi)) {
            dünya.yukarıdakiÇiniyeTaşı(ancılResim)
            dikeyHız = 5
        }
        yoksa eğer (dünya.yukarıdaÇiniVarMı(ancılResim, çarpışmaDüzeyi)) {
            dünya.aşağıdakiÇiniyeTaşı(ancılResim)
            dikeyHız = -2
        }
    }

    tanım resmiGüncelle(yeniResim: Resim) {
        eğer (yeniResim != ancılResim) {
            ancılResim.gizle()
            yeniResim.göster()
            yeniResim.konumuKur(ancılResim.konum)
            ancılResim = yeniResim
        }
    }

    tanım çiz() {
        ancılResim.çiz()
    }
}

dez çiniDünyası = yeni ÇiniDünyası("level1.tmx")

// Yeni bir oyuncu kuralım ve hangi düzeyde olduğunu belirtelim
dez oyuncu = yeni Oyuncu(9, 5, çiniDünyası)
dez inenÇıkanTaşlar = Dizin(
    yeni İnenÇıkanTaşlar(14, 2, çiniDünyası),
    yeni İnenÇıkanTaşlar(17, 3, çiniDünyası),
    yeni İnenÇıkanTaşlar(22, 9, çiniDünyası),
    yeni İnenÇıkanTaşlar(32, 2, çiniDünyası),
    yeni İnenÇıkanTaşlar(35, 3, çiniDünyası)
)

dez hedef = götür(12, 12) * boyaRengi(renkler.greenYellow) * kalemRengi(siyah) -> Resim.daire(10)
hedef.konumuKur(çiniDünyası.çinidenKojoya(ÇiniXY(9, 2)))
hedef.saydamlığıKur(0.2)
çiz(hedef)

dez ilkHedef = götür(12, 12) * boyaRengi(kırmızı) * kalemRengi(siyah) -> Resim.daire(10)
ilkHedef.konumuKur(çiniDünyası.çinidenKojoya(ÇiniXY(41, 15)))
çiz(ilkHedef)

çiniDünyası.çiz()
oyuncu.çiz()
inenÇıkanTaşlar.foreach { inenÇıkanTaş =>
    inenÇıkanTaş.çiz()
}

canlandır {
    çiniDünyası.birAdımİleri()
    oyuncu.birAdımİleri()
    inenÇıkanTaşlar.foreach { inenÇıkanTaş =>
        inenÇıkanTaş.birAdımİleri()
        eğer (oyuncu.ancılResim.çarptıMı(inenÇıkanTaş.ancılResim)) {
            oyuncu.ancılResim.döndür(30)
            durdur()
            çizMerkezdeYazı("Çarptın. Tekrar dene!", kırmızı, 30)
        }
    }
}

tuvaliEtkinleştir()

// oyun kaynaklarını şuradan aldık: https://github.com/pricheal/pygame-tiled-demo
